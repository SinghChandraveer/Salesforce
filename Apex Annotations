AuraEnabled Annotation :
    The @AuraEnabled annotation enables client- and server-side access to an Apex controller method.
    Providing this annotation makes your methods available to your Lightning components.
    
Future Annotation :
    Use the future annotation to identify methods that are executed asynchronously. When you specify future, the method executes when Salesforce has available resources.
    Methods with the future annotation must be static methods, and can only return a void type.
    The specified parameters must be primitive data types, arrays of primitive data types, or collections of primitive data types.
    Methods with the future annotation cannot take sObjects or objects as arguments.
    Methods with the future annotation cannot be used in Visualforce controllers in either getMethodName or setMethodName methods, nor in the constructor.
    You cannot call a method annotated with future from a method that also has the future annotation.
    
    
InvocableMethod Annotation :
    If a flow invokes Apex, the running user must have the corresponding Apex class security set in their user profile or permission set.
    Implementation Notes - 
        The invocable method must be static and public or global, and its class must be an outer class.
        Only one method in a class can have the InvocableMethod annotation.
        Other annotations can’t be used with the InvocableMethod annotation.
    Inputs and Outputs - 
        There can be at most one input parameter and its data type must be one of the following:
        A list of a primitive data type or a list of lists of a primitive data type – the generic Object type is not supported.
        A list of an sObject type or a list of lists of an sObject type.
        A list of the generic sObject type (List<sObject>) or a list of lists of the generic sObject type (List<List<sObject>>).
        A list of a user-defined type, containing variables of the supported types or user-defined Apex types, with the InvocableVariable annotation. Create a custom global or public Apex class to implement your data type, and make sure that your class contains at least one member variable with the invocable variable annotation.
    Managed Packages
        You can use invocable methods in packages, but after you add an invocable method you can’t remove it from later versions of the package.
        Public invocable methods can be referred to by flows and processes within the managed package.
        Global invocable methods can be referred to anywhere in the subscriber org. Only global invocable methods appear in Flow Builder and Process Builder in the subscriber org.

    
                                                    public class AccountQueryAction {
                                                      @InvocableMethod(label='Get Account Names' description='Returns the list of account names corresponding to the specified account IDs.' category='Account')
                                                      public static List<String> getAccountNames(List<ID> ids) {
                                                        List<String> accountNames = new List<String>();
                                                        List<Account> accounts = [SELECT Name FROM Account WHERE Id in :ids];
                                                          for (Account account : accounts) {
                                                            accountNames.add(account.Name);
                                                          }
                                                        return accountNames;
                                                      }
                                                    }
    
    
    
    ********8 If we want to pass more then one perameter in the invocable method,
    Use : @InvocableVariable
      The invocable variable can’t be static or local, final, Protected or private.
      The data type of the invocable variable must be primitive, sObject, either the generic sObject or a specific sObject, list or a list of lists of primitives, sObjects, objects created from Apex classes, or collections.

                  global class ConvertLeadAction {
                    @InvocableMethod(label='Convert Leads')
                    global static List<ConvertLeadActionResult> convertLeads(List<ConvertLeadActionRequest> requests) {
                      List<ConvertLeadActionResult> results = new List<ConvertLeadActionResult>();
                      for (ConvertLeadActionRequest request : requests) {
                        results.add(convertLead(request));
                      }
                      return results;
                    }

                    public static ConvertLeadActionResult convertLead(ConvertLeadActionRequest request) {
                       // Code block with action
                       return ConvertLeadActionResult_List
                    }

                    global class ConvertLeadActionRequest {
                      @InvocableVariable(required=true)
                      global ID leadId;

                      @InvocableVariable(required=true)
                      global String convertedStatus;

                      @InvocableVariable
                      global ID accountId;

                      @InvocableVariable
                      global ID contactId;

                      @InvocableVariable
                      global Boolean overWriteLeadSource;

                      @InvocableVariable
                      global Boolean createOpportunity;

                      @InvocableVariable
                      global String opportunityName;

                      @InvocableVariable
                      global ID ownerId;

                      @InvocableVariable
                      global Boolean sendEmailToOwner;
                    }

                    global class ConvertLeadActionResult {
                      @InvocableVariable
                      global ID accountId;

                      @InvocableVariable
                      global ID contactId;

                      @InvocableVariable
                      global ID opportunityId;
                    }

                    class ConvertLeadActionException extends Exception {}
                  }
    
    
    
    
    
@isTest Annotation :
        @isTest annotation to define classes and methods that only contain code used for testing.
        The testMethod keyword is now deprecated. Use the @isTest annotation on classes and methods instead. The @isTest annotation on methods is equivalent to the testMethod keyword.
        Classes and methods defined as @isTest can be either private or public. Classes defined as @isTest must be top-level classes.
        Classes defined with the @isTest annotation don't count against your organization limit of 6 MB for all Apex code.
        Classes defined as @isTest can't be interfaces or enums.
        
        
                                                            @isTest
                                                            private class MyTestClass {

                                                               // Methods for testing
                                                               @isTest static void test1() {
                                                                  // Implement test code
                                                               }

                                                               @isTest static void test2() {
                                                                  // Implement test code
                                                               }

                                                            }


@isTest(SeeAllData=true) Annotation :
        This grant test classes and individual test methods access to all data in the organization. 
        The access includes pre-existing data that the test didn’t create.
        Can be applied on perticular method or on complete class, if applied on class the annotation applies to all its test methods.
        @isTest(SeeAllData=true) and @isTest(isParallel=true) annotations cannot be used together on the same Apex method.
        ** Try not to use this, instead create your own data using @testSetup
        
@isTest(isParallel=true) Annotation :
         indicate test classes that can run in parallel.
         Default limits on the number of concurrent tests do not apply to these test classes.
         This annotation makes the execution of test classes more efficient, because more tests can be run in parallel.
         This annotation overrides settings that disable parallel testing.
         @isTest(SeeAllData=true) and @isTest(isParallel=true) annotations cannot be used together on the same Apex method.


@isTest(OnInstall=true) Annotation :
        This annotation to specify which Apex tests are executed during package installation. This annotation is used for tests in managed or unmanaged packages. 
        Only test methods with this annotation, or methods that are part of a test class that has this annotation, are executed during package installation.
        A test method or a class that doesn't have this annotation, or that is annotated with @isTest(OnInstall=false) or @isTest, is not executed during installation.
        
        
        In this example, During package installation test1 is executed but test2 and test3 is not.

                                                        @isTest
                                                        private class OnInstallClassTest {
                                                           
                                                           // This test method will be executed during the installation of the package.
                                                           @isTest(OnInstall=true)
                                                           static void test1() {
                                                              // Some test code
                                                           }

                                                           // Tests excluded from running during the the installation of a package.

                                                           @isTest
                                                           static void test2() {
                                                              // Some test code
                                                           }

                                                           static testmethod void test3() {
                                                              // Some test code
                                                           }
                                                        }




TestSetup Annotation : 
        This is used for creating common test records that are available for all test methods in the class.
        the testing framework executes the test setup method first, before any test method in the class.
        Records that are created in a test setup method are available to all test methods in the test class and are rolled back at the end of test class execution.
        If a test method changes those records, such as record field updates or record deletions, those changes are rolled back after each test method finishes execution. The next executing test method gets access to the original unmodified state of those records.
        You can have only one test setup method per test class.
        If a test setup method calls a non-test method of another class, no code coverage is calculated for the non-test method.
        **  If the test class or a test method has access to organization data by using the @isTest(SeeAllData=true) annotation, test setup methods aren’t supported in this class.
        
                        @testSetup static void methodName() {
                        // create the test data
                        // code block
                        }

TestVisible Annotation :
        THis annotationis used to allow test methods to access private or protected members of another class outside the test class.
        For example, if a private member variable isn’t supposed to be exposed to external classes but it should be accessible by a test method, you can add the TestVisible annotation to the variable definition.
                                                public class TestVisibleExample {
                                                    // Private member variable
                                                    @TestVisible private static Integer recordNumber = 1;

                                                    // Private method
                                                    @TestVisible private static void updateRecord(String name) {
                                                        // Do something
                                                    }
                                                }

                                                @isTest
                                                private class TestVisibleExampleTest {
                                                    @isTest static void test1() {
                                                        // Access private variable annotated with TestVisible
                                                        Integer i = TestVisibleExample.recordNumber;
                                                        System.assertEquals(1, i);

                                                        // Access private method annotated with TestVisible
                                                        TestVisibleExample.updateRecord('RecordName');
                                                        // Perform some verification
                                                    }
                                                }


JsonAccess Annotation :
        The @JsonAccess annotation defined at Apex class level controls whether instances of the class can be serialized or deserialized.
        The serializable and deserializable parameters of the @JsonAccess annotation enforce the contexts in which Apex allows serialization and deserialization. You can specify one or both parameters, but you can’t specify the annotation with no parameters. The valid values for the parameters to indicate whether serialization and deserialization are allowed:
            never: never allowed
            sameNamespace: allowed only for Apex code in the same namespace
            samePackage: allowed only for Apex code in the same package (impacts only second-generation packages)
            always: always allowed for any Apex code

                                // SomeSerializableClass is serializable in the same package and deserializable in the wider namespace
                                @JsonAccess(serializable='samePackage' deserializable=’sameNamespace’)
                                public class SomeSerializableClass { }
                                // AlwaysDeserializable class is always deserializable and serializable only in the same namespace (default value from version 49.0 onwards)
                                @JsonAccess(deserializable=’always’)
                                public class AlwaysDeserializable { }

NamespaceAccessible Annotation :
        The @namespaceAccessible makes public Apex in a package available to other packages that use the same namespace.
        Without this annotation, Apex classes, methods, interfaces, properties, and abstract classes defined in a 2GP package aren’t accessible to the other packages with which they share a namespace.
        Apex that is declared global is always available across all namespaces, and needs no annotation.
        You can't use the @namespaceAccessible annotation for an @AuraEnabled Apex method.
        

































