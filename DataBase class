DMLOptions Class

DmlOptions Properties :

    allowFieldTruncation  : Specifies the truncation behavior of large strings.
    assignmentRuleHeader  : Specifies the assignment rule to be used when creating a case or lead.
    emailHeader           : Specifies additional information regarding the automatic email that gets sent when an events occurs.
    localeOptions         : Specifies the language of any labels that are returned by Apex.
    optAllOrNone          : Specifies whether the operation allows for partial success.

++++++++++++++++++++
DmlOptions.AssignmentRuleHeader // Runs/Not_Run the assignment rule while performing DML operation on CASE/LEAD

                    1. assignmentRuleID : Specifies the ID of a specific assignment rule to run for the case or lead. The assignment rule can be active or inactive.(The ID can be retrieved by querying the AssignmentRule sObject.)
                    2. useDefaultRule   : If specified as 'true' for a case or lead, the system uses the default (active) assignment rule for the case or lead.
    
        Database.DMLOptions dmo = new Database.DMLOptions();
        dmo.assignmentRuleHeader.useDefaultRule= true;  OR dmo.assignmentRuleHeader.assignmentRuleId= '01QD0000000EqAn';
        Lead l = new Lead(company='ABC', lastname='Smith');

        l.setOptions(dmo); insert l;
    OR
        Database.insert(l,dmo);
    
++++++++++++++++++++
DMLOptions.DuplicateRuleHeader  // Allow/Not_Allow to save duplicate record

                    1. allowSave        : Set to true to save the duplicate record. Set to false to prevent the duplicate record from being saved.
                    2. runAsCurrentUser : Set to 'true' to make sure that sharing rules for the current user are enforced when duplicate rules run.
                                          Set to 'false' to use the sharing rules specified in the class for the request. 
                                          If no sharing rules are specified, Apex code runs in system context and sharing rules for the current user are not enforced.
                                          


          Database.DMLOptions dml = new Database.DMLOptions(); 
          dml.DuplicateRuleHeader.allowSave = true;
          dml.DuplicateRuleHeader.runAsCurrentUser = true;
          Account duplicateAccount = new Account(Name='dupe');
          Database.SaveResult sr = Database.insert(duplicateAccount, dml);
          if (sr.isSuccess()) {
            System.debug('Duplicate account has been inserted in Salesforce!');
          }

++++++++++++++++++++
DmlOptions.EmailHeader // Even though auto-sent emails can be triggered by actions in the Salesforce user interface, the DMLOptions settings for emailHeader take effect only for DML operations carried out in Apex code.

                        The Salesforce user interface allows you to specify whether or not to send an email when the following events occur:
                              Creation of a new case or task
                              Conversion of a case email to a contact
                              New user email notification
                              Lead queue email notification
                              Password reset
                        In Apex saved against API version 15.0 or later, the Database.DMLOptions emailHeader property enables you to specify additional information regarding the email that gets sent when one of the events occurs because of Apex DML code execution.











==============================================================================================================================================
Operation	          Result Class

insert              update	SaveResult Class
upsert	            UpsertResult Class
merge	              MergeResult Class
delete	            DeleteResult Class
undelete	          UndeleteResult Class
convertLead	        LeadConvertResult Class
emptyRecycleBin	    EmptyRecycleBinResult Class

***Like all returned results, SaveResult contains a method called getErrors that returns a list of Database.Error objects, representing the errors encountered, if any.
_____________________________________________________________________________________________________________________________________
SaveResult Class :

  Database.SaveResult[] srList = Database.insert(acc_list, false);
  for (Database.SaveResult sr : srList) {
    if (sr.isSuccess()) {
        // Operation was successful, so get the ID of the record that was processed
        System.debug('Successfully inserted account. Account ID: ' + sr.getId());
    }
    else {
        // Operation failed, so get all errors                
        for(Database.Error err : sr.getErrors()) {
            System.debug('The following error has occurred.');                    
            System.debug(err.getStatusCode() + ': ' + err.getMessage());
            System.debug('Account fields that affected this error: ' + err.getFields());
        }
    }
___________________________________________________________________________________________________________________________
    
UpsertResult Methods :
  
  Database.UpsertResult[] srList = Database.upsert(acc_list, false);
  
    getErrors()
    If an error occurred, returns an array of one or more database error objects providing the error code and description. If no error occurred, returns an empty set.
    
    getId()
    Returns the ID of the sObject you were trying to update or insert.
    
    isCreated()
    A Boolean value that is set to true if the record was created, false if the record was updated.
    
    isSuccess()
    Returns a Boolean value that is set to true if the DML operation was successful for this object, false otherwise.
__________________________________________________________________________________________________________________________

MergeResult Class :

  Database.MergeResult[] srList = Database.merge(acc_list, false);

    getErrors()
    Returns a list of Database.Error objects representing the errors encountered, if any, during a merge operation using the Database.merge method. If no error occurred, returns null.
    
    getId()
    Returns the ID of the master record into which other records were merged.
    
    getMergedRecordIds()
    Returns the IDs of the records merged into the master record.
    
    getUpdatedRelatedIds()
    Returns the IDs of all related records that were reparented as a result of the merge that are viewable by the user sending the merge call.
    
    isSuccess()
    Indicates whether the merge was successful (true) or not (false).
__________________________________________________________________________________________________________________________

DeleteResult Class :

  Database.DeleteResult[] srList = Database.delete(acc_list, false);

    getErrors()
    If an error occurred, returns an array of one or more database error objects providing the error code and description. If no error occurred, returns an empty set.
    
    getId()
    Returns the ID of the sObject you were trying to delete.
    
    isSuccess()
    A Boolean value that is set to true if the DML operation was successful for this object, false otherwise.
__________________________________________________________________________________________________________________________

UndeleteResult Class :
  
  Database.UndeleteResult[] srList = Database.undelete(acc_list, false);

    getErrors()
    If an error occurred, returns an array of one or more database error objects providing the error code and description. If no error occurred, returns null.
    
    getId()
    Returns the ID of the sObject you were trying to undelete.
    
    isSuccess()
    Returns a Boolean value that is set to true if the DML operation was successful for this object, false otherwise.


==============================================================================================================================================
==============================================================================================================================================




















